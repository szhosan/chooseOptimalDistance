{"version":3,"sources":["../node_modules/js-combinatorics/combinatorics.js","index.js"],"names":["version","_BI","BigInt","Number","_crop","n","MAX_SAFE_INTEGER","permutation","k","RangeError","p","combination","P","c","factorial","factoradic","l","bn","bf","digits","Math","floor","combinadic","count","m","a","b","x","i","push","_crypto","crypto","_randomBytes","len","Uint8Array","from","Array","random","randomInteger","min","max","pow","ctor","constructor","arguments","length","ceil","mag","toString","rnd","reduce","v","_CBase","of","args","Function","prototype","bind","apply","concat","arg","Symbol","iterator","it","nth","toArray","isBig","isSafe","_check","sample","samples","Permutation","seed","size","Object","freeze","undefined","offset","skip","source","slice","result","splice","Combination","comb","bitwiseIterator","zero","one","two","inc","u","y","j","BaseN","base","fill","bb","bd","PowerSet","bi","CartesianProduct","map","chooseOptimalDistance","t","ls","combinations","totals","distance","acc","sort","filter","totalDistance","console","log"],"mappings":"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","file":"src.e64e67ba.js","sourceRoot":"../src","sourcesContent":["/**\n * combinatorics.js\n *\n *  Licensed under the MIT license.\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  @author: Dan Kogai <dankogai+github@gmail.com>\n *\n *  References:\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-combination\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-permutation\n *  @link: http://en.wikipedia.org/wiki/Factorial_number_system\n */\nexport const version = '1.5.6';\nconst _BI = typeof BigInt == 'function' ? BigInt : Number;\n/**\n * crops BigInt\n */\nconst _crop = (n) => n <= Number.MAX_SAFE_INTEGER ? Number(n) : _BI(n);\n/**\n * calculates `P(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Permutation\n */\nexport function permutation(n, k) {\n    if (n < 0)\n        throw new RangeError(`negative n is not acceptable`);\n    if (k < 0)\n        throw new RangeError(`negative k is not acceptable`);\n    if (0 == k)\n        return 1;\n    if (n < k)\n        return 0;\n    [n, k] = [_BI(n), _BI(k)];\n    let p = _BI(1);\n    while (k--)\n        p *= n--;\n    return _crop(p);\n}\n/**\n * calculates `C(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Combination\n */\nexport function combination(n, k) {\n    if (0 == k)\n        return 1;\n    if (n == k)\n        return 1;\n    if (n < k)\n        return 0;\n    const P = permutation;\n    const c = _BI(P(n, k)) / _BI(P(k, k));\n    return _crop(c);\n}\n/**\n * calculates `n!` === `P(n, n)`.\n *\n * @link https://en.wikipedia.org/wiki/Factorial\n */\nexport function factorial(n) {\n    return permutation(n, n);\n}\n/**\n * returns the factoradic representation of `n`, least significant order.\n *\n * @link https://en.wikipedia.org/wiki/Factorial_number_system\n * @param {number} l the number of digits\n */\nexport function factoradic(n, l = 0) {\n    if (n < 0)\n        return undefined;\n    let [bn, bf] = [_BI(n), _BI(1)];\n    if (!l) {\n        for (l = 1; bf < bn; bf *= _BI(++l))\n            ;\n        if (bn < bf)\n            bf /= _BI(l--);\n    }\n    else {\n        bf = _BI(factorial(l));\n    }\n    let digits = [0];\n    for (; l; bf /= _BI(l--)) {\n        digits[l] = Math.floor(Number(bn / bf));\n        bn %= bf;\n    }\n    return digits;\n}\n/**\n * `combinadic(n, k)` returns a function\n * that takes `m` as an argument and\n * returns the combinadics representation of `m` for `n C k`.\n *\n * @link https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nexport function combinadic(n, k) {\n    const count = combination(n, k);\n    return (m) => {\n        if (m < 0 || count <= m)\n            return undefined;\n        let digits = [];\n        let [a, b] = [n, k];\n        let x = _BI(count) - _BI(1) - _BI(m);\n        for (let i = 0; i < k; i++) {\n            a--;\n            while (x < combination(a, b))\n                a--;\n            digits.push(n - 1 - a);\n            x -= _BI(combination(a, b));\n            b--;\n        }\n        return digits;\n    };\n}\n/**\n *\n */\nconst _crypto = typeof crypto !== 'undefined' ? crypto : {};\nconst _randomBytes = typeof _crypto['randomBytes'] === 'function'\n    ? (len) => Uint8Array.from(_crypto['randomBytes'](len))\n    : typeof _crypto['getRandomValues'] === 'function'\n        ? (len) => _crypto['getRandomValues'](new Uint8Array(len))\n        : (len) => Uint8Array.from(Array(len), () => Math.random() * 256);\n/**\n * returns random integer `n` where `min` <= `n` < `max`:\n *\n * if the argument is `BigInt` the result is also `BigInt`.\n *\n * @param {anyint} min\n * @param {anyint} max\n */\nexport function randomInteger(min = 0, max = Math.pow(2, 53)) {\n    let ctor = min.constructor;\n    if (arguments.length === 0) {\n        return Math.floor(Math.random() * ctor(max));\n    }\n    if (arguments.length == 1) {\n        [min, max] = [ctor(0), min];\n    }\n    if (typeof min == 'number') { // number\n        [min, max] = [Math.ceil(Number(min)), Math.ceil(Number(max))];\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    const mag = ctor(max) - ctor(min);\n    const len = mag.toString(16).length;\n    const u8s = _randomBytes(len);\n    const rnd = u8s.reduce((a, v) => ((a << ctor(8)) + ctor(v)), ctor(0));\n    return ((ctor(rnd) * mag) >> ctor(len * 8)) + ctor(min);\n}\n;\n/**\n * Base Class of `js-combinatorics`\n */\nclass _CBase {\n    /**\n     * does `new`\n     * @param args\n     */\n    static of(...args) {\n        return new (Function.prototype.bind.apply(this, [null].concat(args)));\n    }\n    /**\n     * Same as `of` but takes a single array `arg`\n     *\n     * cf. https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n     */\n    static from(arg) {\n        return new (Function.prototype.bind.apply(this, [null].concat(arg)));\n    }\n    /**\n     * Common iterator\n     */\n    [Symbol.iterator]() {\n        return function* (it, len) {\n            for (let i = 0; i < len; i++)\n                yield it.nth(i);\n        }(this, this.length);\n    }\n    /**\n     * returns `[...this]`.\n     */\n    toArray() {\n        return [...this];\n    }\n    /**\n     * tells wether you need `BigInt` to access all elements.\n     */\n    get isBig() {\n        return Number.MAX_SAFE_INTEGER < this.length;\n    }\n    /**\n     * tells wether it is safe to work on this instance.\n     *\n     * * always `true` unless your platform does not support `BigInt`.\n     * * if not, `true` iff `.isBig` is `false`.\n     */\n    get isSafe() {\n        return typeof BigInt !== 'undefined' || !this.isBig;\n    }\n    /**\n    * check n for nth\n    */\n    _check(n) {\n        if (n < 0) {\n            if (this.length < -n)\n                return undefined;\n            return _crop(_BI(this.length) + _BI(n));\n        }\n        if (this.length <= n)\n            return undefined;\n        return n;\n    }\n    /**\n     * get the `n`th element of the iterator.\n     * negative `n` goes backwards\n     */\n    nth(n) { return []; }\n    ;\n    /**\n     * pick random element\n     */\n    sample() {\n        return this.nth(randomInteger(this.length));\n    }\n    /**\n     * an infinite steam of random elements\n     */\n    samples() {\n        return function* (it) {\n            while (true)\n                yield it.sample();\n        }(this);\n    }\n}\n/**\n * Permutation\n */\nexport class Permutation extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.length = permutation(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        const offset = this.seed.length - this.size;\n        const skip = factorial(offset);\n        let digits = factoradic(_BI(n) * _BI(skip), this.seed.length);\n        let source = this.seed.slice();\n        let result = [];\n        for (let i = this.seed.length - 1; offset <= i; i--) {\n            result.push(source.splice(digits[i], 1)[0]);\n        }\n        return result;\n    }\n}\n/**\n * Combination\n */\nexport class Combination extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.size = size;\n        this.length = combination(this.seed.length, this.size);\n        this.comb = combinadic(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    /**\n     * returns an iterator which is more efficient\n     * than the default iterator that uses .nth\n     *\n     * @link https://en.wikipedia.org/wiki/Combinatorial_number_system#Applications\n     */\n    bitwiseIterator() {\n        // console.log('overriding _CBase');\n        const ctor = this.length.constructor;\n        const [zero, one, two] = [ctor(0), ctor(1), ctor(2)];\n        const inc = (x) => {\n            const u = x & -x;\n            const v = u + x;\n            return v + (((v ^ x) / u) >> two);\n        };\n        let x = (one << ctor(this.size)) - one; // 0b11...1\n        return function* (it, len) {\n            for (let i = 0; i < len; i++, x = inc(x)) {\n                let result = [];\n                for (let y = x, j = 0; zero < y; y >>= one, j++) {\n                    if (y & one)\n                        result.push(it.seed[j]);\n                }\n                // console.log(`x = ${x}`);\n                yield result;\n            }\n        }(this, this.length);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let result = [];\n        for (let i of this.comb(n)) {\n            result.push(this.seed[i]);\n        }\n        return result;\n    }\n}\n/**\n * Base N\n */\nexport class BaseN extends _CBase {\n    constructor(seed, size = 1) {\n        super();\n        this.seed = [...seed];\n        this.size = size;\n        let base = this.seed.length;\n        this.base = base;\n        let length = size < 1 ? 0\n            : Array(size).fill(_BI(base)).reduce((a, v) => a * v);\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        const bb = _BI(this.base);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            let bd = bn % bb;\n            result.push(this.seed[Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n/**\n * Power Set\n */\nexport class PowerSet extends _CBase {\n    constructor(seed) {\n        super();\n        this.seed = [...seed];\n        const length = _BI(1) << _BI(this.seed.length);\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        let result = [];\n        for (let bi = _BI(0); bn; bn >>= _BI(1), bi++)\n            if (bn & _BI(1))\n                result.push(this.seed[Number(bi)]);\n        return result;\n    }\n}\n/**\n * Cartesian Product\n */\nexport class CartesianProduct extends _CBase {\n    constructor(...args) {\n        super();\n        this.seed = args.map(v => [...v]);\n        this.size = this.seed.length;\n        const length = this.seed.reduce((a, v) => a * _BI(v.length), _BI(1));\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            const base = this.seed[i].length;\n            const bb = _BI(base);\n            const bd = bn % bb;\n            result.push(this.seed[i][Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n","import { Combination } from '../node_modules/js-combinatorics/combinatorics';\n\nconst chooseOptimalDistance = (t, k, ls) => {\n  let combinations = new Combination(ls, k);\n  if (combinations.length !== 0) {\n    const totals = [...combinations].map(combination =>\n      combination.reduce((distance, acc) => {\n        return distance + acc;\n      }, 0),\n    );\n    return Math.max(...totals.sort((a, b) => a - b).filter(totalDistance => totalDistance <= t));\n  }\n  return null;\n};\n\nconsole.log(chooseOptimalDistance(174, 3, [51, 56, 58, 59, 61])); //173\nconsole.log(chooseOptimalDistance(163, 3, [50])); // null\n"]}